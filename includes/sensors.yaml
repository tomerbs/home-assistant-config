  - platform: yr
    name: CPU

  - platform: uptime 
 
  - platform: systemmonitor
    resources:

      - type: disk_use_percent
        arg: /
      - type: memory_use_percent
      - type: last_boot
      - type: processor_use

  - platform: speedtest
    minute: 30
    hour:
      - 0
      - 6
      - 12
      - 18
    monitored_conditions:
      - ping
      - download
      - upload
      
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      - 'time_date'
      - 'time_utc'
      - 'beat'
    
  - platform: template
    sensors:
      current_activity:
        friendly_name: 'Current Activity'
        value_template: '{{ states.remote.living_room.attributes.current_activity }}'
      ac_setting_cool:
        friendly_name: 'Current AC Cool Setting'
        value_template: '{{ states.input_number.ac_target_temp.state | int }}-{{ states.input_select.ac_fan_mode.state }}-{{ states.input_select.ac_swing_mode.state }}'
      ac_setting_fan:
        friendly_name: 'Current AC Fan Setting'
        value_template: 'FAN-{{ states.input_select.ac_fan_mode.state }}-{{ states.input_select.ac_swing_mode.state }}'
      ac_target:
        friendly_name: 'Target Temperature'
        value_template: '{{ states.input_number.ac_target_temp.state | int }}'
        unit_of_measurement: '°C'
      
      since_last_boot_templated:
        value_template: >-
          {%- set slb = states.sensor.since_last_boot.state.split(' ') -%}
          {%- set count = slb | length -%}
          {%- set hms = slb[count - 1] -%}
          {%- set hms_trimmed = hms.split('.')[0] -%}
          {%- set hms_split = hms_trimmed.split(':') -%}
          {%- set hours = hms_split[0] | int -%}
     
          {%- if count == 3 -%}
            {{ slb[0] ~ ' ' ~ slb[1] ~ ' ' }}
          {%- endif -%}
          {%- if hours > 0 -%}
            {%- if hours == 1 -%}
              1 hour
            {%- else -%}
              {{ hours }} hours
            {%- endif -%}
          {%- endif -%}

      neo_coolcam_water_leakage_sensor:
        friendly_name: "Neo Coolcam Water Leakage Sensor"
        value_template: >-
          {% if is_state('binary_sensor.neo_coolcam_water_leakage_detector_sensor', 'off') %}
            No Leakage
          {% else %}
            Warning Leakage Detected
          {% endif %}
        
      alarm_time:
        friendly_name: 'Time'
        value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.alarmhour") | int, states("input_number.alarmminutes") | int) }}'

      nextalarm:
        friendly_name: Seconds untill next alarm
        entity_id:
         - input_number.alarmhour
         - input_number.alarmminutes
        value_template: >
          {% set relative_time =  (states.input_number.alarmhour.state|float|multiply(60) + states.input_number.alarmminutes.state|float) - (now().hour|float|multiply(60) + now().minute) %}
          {%- if relative_time < 0 -%}
                   {{23*60+relative_time}}
          {%- else -%}
                   {{ relative_time-60}}
          {%- endif %}

      time_until_alarm:
        friendly_name: Time untill next alarm
        entity_id:
         - sensor.nextalarm
        value_template: '{{  (states.sensor.nextalarm.state.split(" ")[0] | int *60 ) | timestamp_custom("%H:%M") }}'
     
      vacuum_status:
        friendly_name: "Vacuum - Status"
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.state }}"
      
      vacuum_cleaner_battery:
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.battery_level }}"
        unit_of_measurement: "%"

      vacuum_lovelace_status:
        friendly_name: "Vacuum - Lovelace Status"
        value_template: "Status: {{ states.vacuum.xiaomi_vacuum_cleaner.attributes.status }}"
        icon_template: >-
          {% if is_state('sensor.robovac_status', 'Cleaning') %}
            mdi:robot-vacuum
          {% elif is_state('sensor.robovac_status', 'Returning home') %}
            mdi:home
          {% elif is_state('sensor.robovac_status', 'Charging') %}
            mdi:battery-charging-wireless
          {% elif is_state('sensor.robovac_status', 'Idle') %}
            mdi:sleep
          {% elif is_state('sensor.robovac_status', 'Error') %}
            mdi:alert
          {% elif is_state('sensor.robovac_status', 'Charger disconnected') %}
            mdi:power-plug-off
          {% else %}
            mdi:help-circle
          {% endif %}
      vacuum_choose_room_to_clean:
        friendly_name: "Choose Room"
        value_template: >-
          {% if is_state('binary_sensor.neo_coolcam_water_leakage_detector_sensor', 'off') %}
            
          {% else %}
            
          {% endif %}
      vacuum_lovelace_battery:
        friendly_name: "Vacuum - Lovelace Battery"
        unit_of_measurement: '%'
        device_class: battery
        value_template: "Battery: {{ states.vacuum.xiaomi_vacuum_cleaner.attributes.battery_level }}"
      vacuum_cleaner_main_brush_cleaning_time:
        friendly_name: "Cleaning Time"
        unit_of_measurement: "Mins"
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.cleaning_time }}"
      vacuum_cleaner_main_brush:
        friendly_name: "Main Brush"
        unit_of_measurement: "Hrs"
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.main_brush_left }}"
      vacuum_cleaner_side_brush:
        friendly_name: "Side Brush"
        unit_of_measurement: "Hrs"
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.side_brush_left }}"
      vacuum_cleaner_filter:
        friendly_name: "Filter"
        unit_of_measurement: "Hrs"
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.filter_left }}"
      vacuum_cleaner_cleaning_count:
        friendly_name: "Cleaning Count"
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.cleaning_count }}"
      vacuum_cleaner_fan_speed:
        friendly_name: "Fan Speed"
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.fan_speed }}"
      vacuum_cleaner_area_cleaned:
        friendly_name: "Area of Last Cycle"
        unit_of_measurement: 'm ²'
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.cleaned_area }}"
      vacuum_clean_sensors:
        friendly_name: Sensors
        unit_of_measurement: 'Hrs'
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.sensor_dirty_left }}"
### ZWAVE
      zwave_neo_coolcam_water_leakage_detector_battery:
        friendly_name: "Water Leakage Battery"
        unit_of_measurement: '%'
        device_class: battery
        value_template: "{{ states.zwave.neo_coolcam_water_leakage_detector.attributes.battery_level }}"

# GATEWAY
      cabinet_door_sensor_battery:
        friendly_name: "Cabinet Door Battery"
        unit_of_measurement: '%'
        device_class: battery
        value_template: "{{ states.binary_sensor.door_window_sensor_158d0001a1f88b.attributes.battery_level }}"
      entrance_door_sensor_battery:
        friendly_name: "Entrance Door Battery"
        unit_of_measurement: '%'
        device_class: battery
        value_template: "{{ states.binary_sensor.door_window_sensor_158d00016cf3b7.attributes.battery_level }}"
        
  - platform: command_line
    name: CPU Temp
    command: "cat /sys/class/thermal/thermal_zone0/temp"
    unit_of_measurement: "°C"
    value_template: '{{ value | multiply(0.001) | round(0) }}'
      
  - platform: mqtt
    name: "Home Temperature"
    state_topic: "tele/Temperature/SENSOR"
    value_template: "{{ value_json['AM2301'].Temperature }}"
    unit_of_measurement: "°C"
    
  - platform: mqtt
    name: "Home Humidity"
    state_topic: "tele/Temperature/SENSOR"
    value_template: "{{ value_json['AM2301'].Humidity }}"
    unit_of_measurement: "%"
    
  - platform: mqtt
    name: "Bathroom Temperature"
    state_topic: "tele/Bathroom Temperature/SENSOR"
    value_template: "{{ value_json['DS18B20'].Temperature }}"
    unit_of_measurement: "°C"
    
  - platform: mqtt
    name: "Bathroom Humidity"
    state_topic: "tele/Bathroom Temperature/SENSOR"
    value_template: "{{ value_json['DS18B20'].Humidity }}"
    unit_of_measurement: "%"

  - platform: mqtt
    name: "Laundry Room Temperature"
    state_topic: "tele/Laundry_Room/SENSOR"
    value_template: "{{ value_json['DS18B20'].Temperature }}"
    unit_of_measurement: "°C"
    
  - platform: mqtt
    name: "Laundry Room Humidity"
    state_topic: "tele/Laundry_Room/SENSOR"
    value_template: "{{ value_json['DS18B20'].Humidity }}"
    unit_of_measurement: "%"
    
  - platform: broadlink
    update_interval: 60
    host: 10.0.0.37
    mac: 34:ea:34:d0:a9:4e
    monitored_conditions:
      - temperature

  - platform: darksky
    api_key: fd01e1ce35015a8f074bdca94bf2fa6f
    monitored_conditions:
      - summary
      - minutely_summary
      - hourly_summary
      - daily_summary
      - pressure
      - temperature
      - apparent_temperature
      - icon
      - wind_speed
      - wind_bearing
      - humidity
      - visibility
      - precip_probability
      - precip_intensity
    update_interval:
      minutes: 5
      